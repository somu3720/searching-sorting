class Solution {
    public int countNegatives(int[][] grid) {
        
        
    int rows = grid.length, cols = grid[0].length; 
        int res = 0, lastNeg = cols - 1;
        for (int i = 0; i < rows; i++) {
            //check edge cases - if first element is < 0 - all elements in row are negative
            if (grid[i][0] < 0) {
                res+=cols;
                continue;
            }
            //if last element is positive - it means there are no negative numbers in a row
            if (grid[i][cols - 1] > 0)
                continue;
            //there is a mix of negative and positive ones, need to find the border. starting
            //binary search
            int lo = 0, hi = lastNeg;
            while (lo <= hi) {
                int mid = lo + (hi - lo)/2;
                if (grid[i][mid] < 0) {
                    hi = mid - 1;
                } else
                    lo = mid + 1;
            }
            //l points to the first negative element, which means cols - l is a number of
            //such elements
            res += (cols - lo); lastNeg = lo;
        }
        return res;
        
    }
}
